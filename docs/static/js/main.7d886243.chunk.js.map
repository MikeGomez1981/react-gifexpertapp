{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imagenes","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAU,IADF,mBACrCC,EADqC,KACzBC,EADyB,KAgB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAG7CN,EAAc,MAIlB,SACG,uBACKO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GAEnBF,EAAcE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEhBC,EAFgB,iDAEgCC,UAAYH,GAF5C,+DAGHI,MAAOF,GAHJ,cAGhBG,EAHgB,gBAIDA,EAAKC,OAJJ,uBAIfC,EAJe,EAIfA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVpB,kBAejBM,GAfiB,4CAAH,sDCAVO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,0CAAf,UACG,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACtB,kCAAKA,EAAL,WCJCS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EAEdd,mBAAU,CAChCqB,KAAK,GACLe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmB5C,OAZIC,qBAAW,WAEX1B,EAASC,GACJ0B,MAAM,SAAAC,GAECH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAACtB,IACDuB,EDhB8BK,CAAa5B,GAAjCa,EAFsB,EAE5BN,KAAce,EAFc,EAEdA,QAIzB,OACA,qCACA,6BAAMtB,IACDsB,GAAW,2CAEZ,qBAAKJ,UAAU,YAAf,SAEML,EAAOJ,KAAK,SAAAC,GAAG,OACf,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdXkB,EAAgB,WAAO,IAAD,EACK3C,mBAAS,CAAC,kBADf,mBACxB4C,EADwB,KACZ7C,EADY,KAKhC,OACK,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACAA,SAAaA,GACLA,Y,MCdhC+B,IAASC,OAEN,cAAC,EAAD,IAEDC,SAASC,eAAe,W","file":"static/js/main.7d886243.chunk.js","sourcesContent":["\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState( '');\r\n\r\n    const handleInputChange = (e) => {\r\n          \r\n            setInputValue(e.target.value )\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2 ){\r\n            setCategories(categorias => [ inputValue, ...categorias]); //video 72, en el video 77 se explica como despues de \r\n                                                                      //mostrar los gifs que pongamos en el input, se muestre \r\n                                                                      //1º el que solicitemos y despues el que habia\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n           <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange}\r\n           />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = { setCategories: PropTypes.func.isRequired }","\r\n\r\n\r\n   export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI ( category )}&api_key=Stm4AMn8ZlGIAFYthaiE8ybHQLldtM3o&limit=10`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return { \r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url//la interrogación hace que si no tuviera imagenes(lo solicitado)\r\n                                                //no lo muestre\r\n        }\r\n    });\r\n\r\n  return gifs;\r\n} ","\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n   \r\n    console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn \">\r\n           <img src={ url } alt={ title}/>\r\n            <p> {title} </p>\r\n        </div>\r\n            )    \r\n\r\n}\r\n","\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n   \r\n   const { data: images, loading } = useFetchGifs(category);\r\n   \r\n     /* De esta manera mostramos el nombre con el ID como key. Aparte hacemos \r\n           desestruturación ({ id, title }) para no tener que poner, por ejp: images.id */\r\nreturn (\r\n<>\r\n<h3>{ category }</h3>\r\n    {loading && <p>Loading...</p>}\r\n     \r\n    <div className=\"card-grid\">      \r\n        {                                 \r\n          images.map( img => (\r\n          <GifGridItem \r\n              key={ img.id }\r\n              { ...img } // enviamos cada propiedad de las imgenes como propiedades independientes\r\n            //img={ img }\r\n              />\r\n          ))\r\n      }\r\n</div>\r\n</>\r\n)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   \r\n    const [state, setstate] = useState( {\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () =>{\r\n        \r\n    getGifs( category )\r\n        .then( imagenes => {\r\n          \r\n                setstate({\r\n                    data :imagenes,\r\n                    loading: false\r\n                });\r\n  \r\n        })\r\n    }, [category])\r\nreturn state;\r\n\r\n}","\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GiftExpertApp = () => {\r\n    const [categories, setCategories] = useState(['american gods'/*, 'misfits', 'falling water' */])\r\n\r\n    //const handleAdd = () => {\r\n      //  setCategories ([ ... categories,'it']); }\r\n   return (\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        category = { category }\r\n                        key = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GiftExpertApp } from './GiftExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n\n   <GiftExpertApp />,\n   \n  document.getElementById('root')\n);\n"],"sourceRoot":""}